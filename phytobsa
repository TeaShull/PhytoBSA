#!/usr/bin/env python
# import utililites & parse arguments
from modules.utilities_parser import ArgumentParser
arg_parser = ArgumentParser() #First so DATA_DIR can be set & populate paths
args = arg_parser.args
from modules.utilities_logging import LogHandler
from modules.utilities_general import LogDbUtilites, RefDbUtilities

# import core modules - vcf generation and BSA
from modules.core_vcf_gen import VCFGenerator
from modules.core_bsa import BSA

#core_variables contins classes that configure runtime variables. 
from modules.core_variables import (
    Lines, AutomaticLineVariableDetector, VCFGenVariables, BSAVariables
) # Paths are set in settings.globals and imported in modules.core_variables 


def setup_vcf_variables(core_log, line, args):
    '''
    Setup VCFGenVariables class, which holds variables needed to run vcf_gen()
    
    lines is a list of the Line class, which holds line-specific runtime 
    variables such as input files, line names, segregation patterns, exc. 

    Settings Variables are either passed by user via utilites_parser or sourced 
    from config.ini (check ./phytobsa settings -h to set defaults. One can also 
    directly edit config.ini in a text editor)
    '''
    #Setup sqlite connection to fetch reference configuration from ref database
    refdb_utils = RefDbUtilities(core_log, args.reference_name)

    vcf_vars = VCFGenVariables(
        logger=core_log,
        lines=line, #list of class Lines. Contains variables set through parser or automatic detection in input folder
        
        #settings. set in config.ini or at runtime using parser. 
        reference_genome_path=refdb_utils.fetch_ref_var('reference_genome_path'), 
        reference_genome_source=refdb_utils.fetch_ref_var('reference_genome_source'),
        omit_chrs_patterns=args.omit_chrs_patterns,
        snpeff_species_db=refdb_utils.fetch_ref_var('snpeff_species_db'),
        call_variants_in_parallel=args.call_variants_in_parallel,
        cleanup=args.cleanup,
        cleanup_filetypes=args.cleanup_filetypes
    )
    return vcf_vars

def setup_bsa_variables(core_log, lines, args):
    '''
    Setup BSAVariables classs, which holds variables needed to run bsa() 
    
    lines is a list of the Line class, which holds line-specific runtime 
    variables such as input files, line names, segregation patterns, exc

    Args are either passed by user or sourced from config.ini (check phytobsa 
    settings -h to set defaults. One can also directly edit config.ini in a text 
    editor)
    '''
    refdb_utils = RefDbUtilities(core_log, args.reference_name)
    bsa_vars = BSAVariables(
        logger=core_log, 
        lines=lines, #list of the class Lines. Contains variables set through parser or automatic detection in input folder
        
        #settings. set in config.ini or at runtime using parser. 
        loess_span=args.loess_span, 
        smooth_edges_bounds=args.smooth_edges_bounds, 
        shuffle_iterations=args.shuffle_iterations,
        filter_indels=args.filter_indels,
        filter_ems=args.filter_ems,
        snpmask_path=refdb_utils.fetch_ref_var('snpmask_path'),
        snpmask_url=refdb_utils.fetch_ref_var('snpmask_url'),
        mask_snps=args.mask_snps,
        ratio_cutoff=args.ratio_cutoff
    )
    return bsa_vars


def main():
    '''
    Classes are passed a LogHandler [modules.utilities_logging] instance on init.
    Unique IDs (ulid) are assigned upon init of LogHandler. 
    
    ulids link file outputs to their log. 
    ulid's are stored in LogHandler instances, and exported to the Lines data
    class during core_vcf_gen and core_bsa processes. 

    LogHandler manages the sqlite log database to save run information. 

    log list:
    'core' - logs all main program logic in thale_bsa.py, before child log init.  
        'vcf_gen_<line_name>' - line specific logs pertaining to core_vcf_gen 
        'analysis_<line_name>' - line specific logs peratining to core_bsa 
    '''
    
    if args.command != 'logdb':
        core_log = LogHandler('core')
        core_log.note(f'Core log begin. ulid: {core_log.ulid}')
        core_log.add_db_record()
    
    # Determine which routine to run
    if args.command == 'analysis':
        #init Lines var class
        line = Lines(core_log, args.name) # more info in modules.core_variables

        #Parse user input into Lines Class. Input checks are done here
        line.usr_in_line_variables(
            vcf_table_path=args.vcf_table_path, 
            segregation_type=args.segregation_type
        )

        # Process line & args, prep variables needed for runtime + more checks
        lines = [line] #list so that lines can be iterable in automatic mode. 
        bsa_vars = setup_bsa_variables(core_log, lines, args)
        
        # pass bsa_vars Class instance to the BSA pipeline, and run
        bsa = BSA(core_log, bsa_vars)    
        bsa() #run pipeline
    
    elif args.command == 'vcf_generator':
        
        #init Lines var class
        line = Lines(core_log, args.name) 
        
        #Parse user input into Lines Class. Input checks are done here
        line.usr_in_line_variables(
            reference_genome_path=args.reference_genome_path, 
            wt_input=args.wt_input, 
            mu_input=args.mu_input
        ) 

        # [modules.core_variables]
        #process line & args, prep variables needed for runtime + more checks
        lines = [line]
        vcf_vars = setup_vcf_variables(core_log, lines, args)
        
        #Pass vcf_vars Class instance to the VCF generater and run
        vcf_gen = VCFGenerator(core_log, vcf_vars)
        vcf_gen() #run subprocess

    elif args.automatic:
        #automatically generate Lines from files in Input, if formatted properly
        auto_vars = AutomaticLineVariableDetector(core_log)
        auto_vars() #Generate variables
        
        #process line & args, prep variables needed for runtime + more checks
        vcf_vars = setup_vcf_variables(core_log, auto_vars.lines, args)
        
        #Pass vcf_vars Class instance to the VCF generater & run
        vcf_gen = VCFGenerator(core_log, vcf_vars)
        vcf_gen()#run subprocess
        
        # Pass "Lines" used in vcf_gen instance to bsa_vars.
        bsa_vars = setup_bsa_variables(core_log, vcf_gen.vcf_vars.lines, args)
        
        #Pass bsa_vars containing lines from vcf_gen step & run BSA pipeline
        bsa = BSA(core_log, bsa_vars)
        bsa() #run pipeline

    elif args.command == 'logdb':
        logdb_utils = LogDbUtilites()
        if args.vcf_ulid_log:
            logdb_utils.print_vcf_log_data(args.vcf_ulid_log)
        if args.analysis_ulid_log:
            logdb_utils.print_analysis_log_data(args.analysis_ulid_log)
        if args.line_name_log:
            logdb_utils.print_line_name_data(args.line_name_log)
        if args.core_ulid_log:
            logdb_utils.print_core_ulid_data(args.core_ulid_log)

if __name__ == "__main__":
    main()
